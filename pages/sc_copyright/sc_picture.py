"""Author  : zhouqixiTime    : 2022/3/3 14:57Desc:   图片模块"""from urllib.parse import unquotefrom common.op_windows import OpWindowsfrom element.sc_copyright import sc_search_elementfrom pages.sc_copyright.sc_favoritesPage import FavoritesPagefrom common.readLog import Logfrom model.scModel.homeModel import HomeModelfrom model.scModel.picModel import PicModelfrom model.scModel.vipModel import VIPModelfrom common.sendDingTalk import SendDingTalkfrom model.scModel.favoritesModel import FavoritesModelfrom model.scModel.commModel import CommModelop = OpWindows()selectNum = OpWindows.RandomSelect(op)Ele = sc_search_element.sc_Eleclass SCPicture(PicModel, HomeModel, VIPModel, FavoritesModel, CommModel):    log = Log(__name__)    logger = log.getLog()    # 在首页输入关键词进行搜索    def SearchPage(self):        try:            sc_text = "美"            self.write(Ele.scHInput, sc_text)  # 输入            self.click(Ele.scHBtn)            self.sleep(2)            self.searchDeal(sc_text)            self.refresh()        except Exception as e:            self.logger.error("版权站-图片搜索页面时异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页面时报错")            raise e    # 操作滚动当前搜索页    def rollPage(self):        try:            self.mouse_hover(Ele.firstPic)            self.rollWeb(Ele.footDiv)            self.sleep(4)            self.rollWeb(Ele.footDiv)            self.sleep(2)            self.click(Ele.backTop)  # 右侧悬浮置顶按钮            self.sleep(3)            self.refresh()        except Exception as e:            self.logger.error("版权站-图片搜索页显示搜索结果滚动页面时异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页显示搜索结果滚动页面时报错")            raise e    # 清空图片搜索输入框，重新输入关键词搜索    def SearchByText(self):        try:            sc_text = "队"            self.clear(Ele.scInput)            self.write(Ele.scInput, sc_text)            self.click(Ele.scBtn)            self.sleep(2)            self.searchDeal(sc_text)            self.refresh()        except Exception as e:            self.logger.error("版权站-图片搜索清空重新搜索异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索清空重新搜索报错")            raise e    # 对搜索结果进行筛选    def selectSearch(self):        try:            self.radmSelect()            self.refresh()        except Exception as e:            self.logger.error("版权站-图片搜索页选择筛选项异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页选择筛选项报错")            raise e    #  个人在图片列表点击下载样图    def picList_down_yangtu(self):        try:            res_tips = ""            self.click_pic_menu()  # 点击导航的图片            self.sleep(3)            # self.click_picList_first_pic()            self.window(-1)            self.pl_hover_first_pic()            self.sleep(1)            self.download_yangtu()            try:                # tips_list = self.get_tips_list()                # tips_text = ['下载成功', '您已下载过该样图，为您免费重复下载']                # flag = False                # cont  = 0                # while flag == False and cont < 5:                #     for i in tips_list:                #         res = self.getElements(i)                #         if len(res) == 0:                #             cont += 1                #             continue                #         if len(res) != 0:                #             res_tips = self.getText(i)                #             flag = True                # 样图下载无额度提示                title = self.apply_title()                assert title == "下载成功"            except:                self.logger.info('图片详情点击下载样图没有弹框')        except Exception as e:            self.logger.error('团队下载样图失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("团队下载样图失败")            raise e    # 添加图片到收藏/取消图片收藏    def collectPic(self):        try:            self.mouse_hover(Ele.firstPic)            self.ptclick(Ele.picCollect)            self.sleep(2)            self.collectDialog(len(Ele.coDialog))            self.mouse_hover(Ele.firstPic)            self.ptclick(Ele.picCollect)            self.sleep(2)        except Exception as e:            self.logger.error("版权站-图片搜索页点击取消收藏异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页点击取消收藏异常")            raise e    # 图片详情页    def picDetail(self):        try:            self.click_sen_first_pic()  # 点击第一张图片            self.window(-1)            # 获取图片名称            name = self.get_pic_name()  # 获取图片名称            assert name != ""        except Exception as e:            self.logger.error("版权站-图片详情页点击取消收藏异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片详情页点击取消收藏异常")            raise e    # ==================团队========================    # 团队在图片详情点击下载样图    def team_pic_detail_down_yangtu(self):        try:            res_tips = ""            tips_text = ['下载成功', '您的团队已下载过该样图，为您免费重复下载']            tips_list = self.get_tips_list()            # flag = False            # cont = 1            # while flag == False and cont < 5:            #     self.pic_detail_download_yangtu() # 下载样图按钮            #     self.sleep(1)            #     for i in tips_list:            #         res = self.getElements(i)            #         if len(res) == 0:            #             cont += 1            #             continue            #         if len(res) != 0:            #             res_tips = self.getText(i)            #             flag = True            tips = self.get_tips_list()            title = self.getText(tips)            assert title == "下载成功"        except Exception as e:            self.logger.error('团队在图片详情下载样图失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("团队在图片详情下载样图失败")            raise e    # 团队在图片详情点击下载原图    def team_pic_detail_down_yuantu(self, driver):        try:            flag = False            self.download_yuantu()            is_true = self.loop_tips()            if is_true == False:                # 选择文件夹                try:                    try:                        self.select_coll_folder(driver)  # 应该判断没有可选的 出现异常，重新创建                    except:                        while flag == False:                            try:                                FavoritesPage(driver).click_new_folder_btn()                                FavoritesPage(driver).write_folder_name()  # 输入收藏夹名称                                self.sleep()                                FavoritesPage(driver).click_coll_folder()  # 为了保存                                tip = FavoritesPage(driver).folder_name_repeat_tips()  # 创建成功重复的提示弹窗                            except:                                tip = ""                            if tip == "文件夹名称重复":                                flag = False                            else:                                flag = True                        self.select_coll_folder(driver)  # 新建完了再选择                except:                    self.logger.info("重复下载")        except Exception as e:            self.logger.error('团队在图片详情下载原图失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("团队在图片详情下载原图失败")            raise e    # 图片详情点击关键词进入搜索页面    def key_word_into(self):        try:            key_word_name = self.pic_detail_get_key_name()            self.pic_detail_click_key()            self.logger.info("在图片详情页，点击关键词名称：%s" % key_word_name)            self.sleep(3)            self.window(-1)            # 获取到图片个数            pic_num = self.pic_list_get_pic_num()            assert pic_num > 0            self.close_handle()        except Exception as e:            self.logger.error('点击关键词进入图片搜索结果页，获取数据失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("点击关键词进入图片搜索结果页，获取数据失败")            raise e    def loop_tips(self):        '''循环获取提示'''        flag = False        cont = 0        while flag == False and cont < 5:            try:                sucess_tips = ('xpath', "//p[@class='el-message__content']")                tips = self.getText(sucess_tips)                angder = '素材已成功添加至文件夹111'                angder1 = '您的团队已下载过该原图，为您免费重复下载'                ass_list = [angder, angder1]                if tips in ass_list:                    flag = True                    return flag                else:                    cont += 1                    continue            except:                flag = False                break        return flag    # 团队在图片列表下载样图    def team_picList_down_yangtu(self):        try:            res_tips = ""            tips_text = ['下载成功', '您的团队已下载过该样图，为您免费重复下载']            self.click_index_first_pic()            self.window(-1)            tips_list = self.get_tips_list()            flag = False            cont = 0            while flag == False and cont < 5:                self.pl_hover_first_pic()                self.download_yangtu()                self.sleep(0.5)                for i in tips_list:                    res = self.getElements(i)                    if len(res) == 0:                        cont += 1                        continue                    if len(res) != 0:                        res_tips = self.getText(i)                        flag = True            assert res_tips in tips_text        except Exception as e:            self.logger.error('失败：企业下载样图失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("失败：企业下载样图失败")            raise e    # 个人在图片详情点击下载样图    def personal_detail_down_yangtu(self):        try:            res_tips = ""            self.click_sen_first_pic()            self.sleep(2)            self.window(-1)            self.pic_detail_download_yangtu()            try:                title = self.apply_title()                assert title == "下载成功"            except:                self.logger.info('图片详情点击下载样图没有弹框')        except Exception as e:            self.logger.error('失败：下载样图失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("失败：下载样图失败")            raise e    # 个人在图片详情下载原图    def personal_download_yuantu(self):        try:            tip_list = ['下载成功', '您已下载过该原图，为您免费重复下载']            self.download_yuantu()            # 如果下载原图无权限，则弹窗支付弹框            try:                real_tips = self.get_repeat_download_tips()                assert real_tips in tip_list            except:                # 弹窗支付弹框，获取价格                final_price = self.get_alert_price()                self.alert_close_btn()                assert float(final_price) > 0        except Exception as e:            self.logger.error('失败：下载原图失败%s' % repr(e))            SendDingTalk().sendDingTalkMsg("失败：下载原图失败")            raise e    # ----------------公用方法---------------------------    # 收藏图片异常处理    def collectDialog(self, num):        try:            if num == 0:                # 没有收藏夹，创建,创建完成后点击第一个li                self.write(Ele.coCrInput, "测试收藏")                self.click(Ele.coSubBtn)            else:                self.click(Ele.coList)                self.click(Ele.coSubBtn)                self.sleep(2)        except Exception as e:            self.logger.error("版权站-图片搜索页点击添加收藏异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页点击添加收藏异常")            raise e    # 打开图片详情异常处理    def opWindowDeal(self, txt):        try:            self.sleep(2)            self.window(1)            # cur_address = unquote(self.getUrl(), encoding="utf8")            # self.assert_text(txt, cur_address)            self.close_and_home_page()        except Exception as e:            self.logger.error("版权站-图片搜索页点击进入图片详情页异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页点击进入图片详情页异常")            raise e    # 随机筛选查询    def radmSelect(self):        for index, item in enumerate(selectNum):            select_ele = (                'xpath',                '//div[@class="search-content"]/descendant::ul[@class="search-type"]/li[%s]/ul/li[%s]' % (                    index + 1, item))            self.select_type(select_ele)    # 筛选查询    def select_type(self, ele):        self.click(Ele.seTarget)        self.click(ele)        self.sleep(3)        text = self.getText(Ele.seText)        self.selectDeal(text)    # 筛选结果异常处理    def selectDeal(self, text):        try:            keywords = self.getText(Ele.seText)            result = int(self.getText(Ele.scNumber))            self.assert_in_abnormal(text, keywords)            assert result >= 0            self.mouse_hover(Ele.seTarget)            self.click(Ele.seReText)            self.sleep(2)        except Exception as e:            self.logger.error("版权站-图片搜索页，筛选查询异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页，筛选查询异常")            raise e    # 搜索结果异常处理    def searchDeal(self, text):        try:            urlText = unquote(self.getUrl(), encoding="utf8")            keywords = self.getElementAttr(Ele.scInput, 'value')            result = int(self.getText(Ele.scNumber))            self.assert_in_abnormal(text, urlText)            self.assert_text(text, keywords)            assert result >= 0        except Exception as e:            self.logger.error("版权站-图片搜索页，搜索结果显示异常:%s" % {e})            SendDingTalk().sendDingTalkMsg("版权站-图片搜索页，搜索结果显示异常")            raise e